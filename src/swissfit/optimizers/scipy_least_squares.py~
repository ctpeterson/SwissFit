from scipy import optimize as _optimize # SciPy optimize
from .optimizer import Optimizer as _Optimizer # Optimizer parent class

""" Least squares wrapper """
_lsq_args = ['jac', 'method', 'ftol', 'xtol',
             'gtol', 'x_scale', 'loss', 'f_scale',
             'diff_step', 'tr_solver', 'tr_options',
             'jac_sparsity', 'max_nfev', 'verbose',
             'args', 'kwargs']
def scipy_least_squares(*args, **kwargs):
    fit = _optimize.least_squares(
        *args,
        **{key: kwargs[key] for key in kwargs.keys()
           if key in _lsq_args} # Filter lsqfit args
    )
    fit.fun = fit.cost; return fit;
    
""" Least squares class """
class LeastSquares(_Optimizer):
    def __init__(self,
                 fcn = None,
                 jac = None,
                 optimizer_arguments = {}
                 ):
        super().__init__(fcn = fcn, jac = jac, optimizer_arguments = optimizer_arguments)
    def __call__(self, p0):
        return scipy_least_squares(self._fcn, p0, jac = self._jac, **self._args)
